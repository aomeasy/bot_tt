import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, timedelta
from database import Database
from bot import BitkubBot
import config

st.set_page_config(page_title="Bot Trade Dashboard", page_icon="ü§ñ", layout="wide")

# Initialize
db = Database()
bot = BitkubBot()

# Sidebar
st.sidebar.title("ü§ñ Bot Trade Control")
st.sidebar.markdown("---")

if st.sidebar.button("üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
        if bot.save_prices():
            st.sidebar.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            st.sidebar.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

if st.sidebar.button("üíö Health Check"):
    status = bot.health_check()
    if status['database'] == 'OK' and status['api'] == 'OK':
        st.sidebar.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
    else:
        st.sidebar.error(f"‚ùå DB: {status['database']}, API: {status['api']}")

if st.sidebar.button("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"):
    bot.generate_daily_report()
    st.sidebar.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

if st.sidebar.button("üíæ Backup Database"):
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á backup..."):
        bot.backup_database()
        st.sidebar.success("‚úÖ Backup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if st.sidebar.button("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î"):
    signals = bot.analyze_market()
    if signals:
        st.sidebar.success(f"‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì {len(signals)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        for sig in signals:
            st.sidebar.info(f"{sig['action']} {sig['symbol']}: {sig['reason']}")
    else:
        st.sidebar.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ó‡∏£‡∏î")

st.sidebar.markdown("---")
st.sidebar.info(f"‚öôÔ∏è Min Profit: {config.MIN_PROFIT_PERCENT}%\nüí∞ Max Trade: {config.MAX_TRADE_AMOUNT} THB")

# Main Dashboard
st.title("üìà Bot Trade Dashboard")
st.markdown("### ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ Bitkub API")

# Metrics
col1, col2, col3, col4 = st.columns(4)

trades_today = db.get_trades_today()
total_profit_today = sum([t['profit'] for t in trades_today]) if trades_today else 0
success_today = sum([1 for t in trades_today if t['profit'] > 0]) if trades_today else 0
success_rate_today = (success_today / len(trades_today) * 100) if trades_today else 0

col1.metric("üî¢ ‡πÄ‡∏ó‡∏£‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", len(trades_today))
col2.metric("üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{total_profit_today:.2f} THB", delta=f"{total_profit_today:.2f}")
col3.metric("‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"{success_rate_today:.1f}%")
col4.metric("üéØ ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏î", len(config.SYMBOLS))

st.markdown("---")

# Tabs
tab1, tab2, tab3, tab4 = st.tabs(["üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "üíπ ‡∏£‡∏≤‡∏Ñ‡∏≤", "üìù ‡πÄ‡∏ó‡∏£‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"])

with tab1:
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° 30 ‡∏ß‡∏±‡∏ô")
    summary = db.get_daily_summary(30)
    
    if summary:
        df_summary = pd.DataFrame(summary)
        
        # Chart
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=df_summary['date'],
            y=df_summary['profit'],
            name='‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô',
            marker_color=['green' if x > 0 else 'red' for x in df_summary['profit']]
        ))
        fig.update_layout(
            title='‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
            xaxis_title='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
            yaxis_title='THB',
            height=400
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Table
        st.dataframe(df_summary, use_container_width=True)
        
        # Summary Stats
        col1, col2, col3 = st.columns(3)
        col1.metric("üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏° 30 ‡∏ß‡∏±‡∏ô", f"{df_summary['profit'].sum():.2f} THB")
        col2.metric("üìä ‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏ß‡∏°", int(df_summary['trades'].sum()))
        col3.metric("‚úÖ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{df_summary['success_rate'].mean():.1f}%")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

with tab2:
    st.subheader("üíπ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    
    symbol_select = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç", config.SYMBOLS)
    hours = st.slider("‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", 1, 168, 24)
    
    prices = db.get_prices(symbol_select, hours)
    
    if prices:
        df_prices = pd.DataFrame(prices)
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=df_prices['timestamp'],
            y=df_prices['price'],
            mode='lines+markers',
            name='‡∏£‡∏≤‡∏Ñ‡∏≤',
            line=dict(color='blue', width=2)
        ))
        fig.update_layout(
            title=f'‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤ {symbol_select}',
            xaxis_title='‡πÄ‡∏ß‡∏•‡∏≤',
            yaxis_title='‡∏£‡∏≤‡∏Ñ‡∏≤ (THB)',
            height=400
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Stats
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", f"{df_prices.iloc[0]['price']:.2f}")
        col2.metric("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{df_prices['price'].max():.2f}")
        col3.metric("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{df_prices['price'].min():.2f}")
        col4.metric("‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{df_prices['price'].mean():.2f}")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤' ‡∏ó‡∏µ‡πà Sidebar")

with tab3:
    st.subheader("üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    
    if trades_today:
        df_trades = pd.DataFrame(trades_today)
        df_trades['timestamp'] = pd.to_datetime(df_trades['timestamp'])
        
        # Color code
        df_trades['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = df_trades['profit'].apply(lambda x: 'üü¢ ‡∏Å‡∏≥‡πÑ‡∏£' if x > 0 else 'üî¥ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô')
        
        st.dataframe(
            df_trades[['timestamp', 'symbol', 'side', 'price', 'amount', 'profit', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']],
            use_container_width=True
        )
        
        # Profit by symbol
        profit_by_symbol = df_trades.groupby('symbol')['profit'].sum().reset_index()
        
        fig = go.Figure(data=[
            go.Bar(
                x=profit_by_symbol['symbol'],
                y=profit_by_symbol['profit'],
                marker_color=['green' if x > 0 else 'red' for x in profit_by_symbol['profit']]
            )
        ])
        fig.update_layout(title='‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç', height=300)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

with tab4:
    st.subheader("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    
    daily_reports = db.get_daily_summary(90)
    
    if daily_reports:
        df_reports = pd.DataFrame(daily_reports)
        df_reports['month'] = pd.to_datetime(df_reports['date']).dt.to_period('M')
        
        monthly = df_reports.groupby('month').agg({
            'trades': 'sum',
            'profit': 'sum',
            'success_rate': 'mean'
        }).reset_index()
        
        monthly['month'] = monthly['month'].astype(str)
        
        # Chart
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=monthly['month'],
            y=monthly['profit'],
            name='‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
            marker_color=['green' if x > 0 else 'red' for x in monthly['profit']]
        ))
        fig.update_layout(title='‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        st.dataframe(monthly, use_container_width=True)
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

# Footer
st.markdown("---")
st.markdown("ü§ñ **Bot Trade System** | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠ Day Trade ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô")
st.caption(f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# Cleanup
db.close()
